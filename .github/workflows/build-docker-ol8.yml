name: Build & Publish OL8 Docker Images

on:
  push:
    branches:
      - release
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      ref_name:
        description: '镜像标签（如 v1.6.10）'
        required: true
        default: 'v1.0.0'

env:
  REPO_DOCKERHUB: docker.io/qyg2297248353/ammds
  REPO_GHCR:      ghcr.io/qyg2297248353/ammds

jobs:
  # 1) 统一计算 TAG 并输出
  set-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.calc.outputs.tag }}
    steps:
      - id: calc
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.ref_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            branch=${GITHUB_REF#refs/heads/}
            echo "tag=$branch" >> $GITHUB_OUTPUT
          fi

  # 1.5) 检查 ol8 multi-arch manifest 是否已存在，决定是否跳过构建
  check-images-ol8:
    needs: set-tag
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.check.outputs.skip_build }}
    steps:
      - name: Login DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Inspect existing OL8 manifest
        id: check
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}-ol8
          if docker manifest inspect ${{ env.REPO_DOCKERHUB }}:$TAG > /dev/null 2>&1; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug skip_build output
        run: echo "SKIP_BUILD=${{ steps.check.outputs.skip_build }}"

  # 2a) 构建 amd64-ol8 单架构
  build-amd64-ol8:
    needs: [set-tag, check-images-ol8]
    if: needs.check-images.outputs.skip_build != 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Clone AMMDS (no LFS)
        run: |
          git lfs install --skip-smudge
          git clone https://x-access-token:${{ secrets.GITHUBTOKEN }}@github.com/QYG2297248353/AMMDS.git ammds-source
          cd ammds-source && git lfs pull --exclude="*"

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}

      - name: Build & push amd64-ol8
        uses: docker/build-push-action@v4
        with:
          context: ./ammds-source
          file:    ./ammds-source/Dockerfile-OL8
          platforms: linux/amd64
          push:      true
          tags: |
            ${{ env.REPO_DOCKERHUB }}:${{ needs.set-tag.outputs.tag }}-ol8-amd64
            ${{ env.REPO_GHCR }}:${{ needs.set-tag.outputs.tag }}-ol8-amd64

  # 2b) 构建 arm64-ol8 单架构
  build-arm64-ol8:
    needs: [set-tag, check-images-ol8]
    if: needs.check-images.outputs.skip_build != 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Clone AMMDS (no LFS)
        run: |
          git lfs install --skip-smudge
          git clone https://x-access-token:${{ secrets.GITHUBTOKEN }}@github.com/QYG2297248353/AMMDS.git ammds-source
          cd ammds-source && git lfs pull --exclude="*"

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}

      - name: Build & push arm64-ol8
        uses: docker/build-push-action@v4
        with:
          context: ./ammds-source
          file:    ./ammds-source/Dockerfile-OL8
          platforms: linux/arm64
          push:      true
          tags: |
            ${{ env.REPO_DOCKERHUB }}:${{ needs.set-tag.outputs.tag }}-ol8-arm64
            ${{ env.REPO_GHCR }}:${{ needs.set-tag.outputs.tag }}-ol8-arm64

  # 3) 合并成 ol8 双架构 manifest（不 touch latest）
  create-manifest-ol8:
    needs: [set-tag, check-images-ol8, build-amd64-ol8, build-arm64-ol8]
    if: ${{ needs.set-tag.outputs.tag != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}

      - name: Create & push DockerHub ol8 manifest
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          docker manifest create ${{ env.REPO_DOCKERHUB }}:$TAG-ol8 \
            --amend ${{ env.REPO_DOCKERHUB }}:$TAG-ol8-amd64 \
            --amend ${{ env.REPO_DOCKERHUB }}:$TAG-ol8-arm64
          docker manifest push ${{ env.REPO_DOCKERHUB }}:$TAG-ol8

      - name: Create & push GHCR ol8 manifest
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          docker manifest create ${{ env.REPO_GHCR }}:$TAG-ol8 \
            --amend ${{ env.REPO_GHCR }}:$TAG-ol8-amd64 \
            --amend ${{ env.REPO_GHCR }}:$TAG-ol8-arm64
          docker manifest push ${{ env.REPO_GHCR }}:$TAG-ol8
