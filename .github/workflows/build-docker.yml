name: Build & Publish Docker Images

on:
  push:
    branches: [ release ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      ref_name:
        description: '镜像标签（如 v1.6.10）'
        required: true
        default: 'v1.0.0'

env:
  REPO_DOCKERHUB: docker.io/qyg2297248353/ammds
  REPO_GHCR:      ghcr.io/qyg2297248353/ammds

jobs:
  # 1. 统一计算 tag
  set-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.calc_tag.outputs.tag }}
    steps:
      - id: calc_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.ref_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            BRANCH=${GITHUB_REF#refs/heads/}
            echo "tag=$BRANCH" >> $GITHUB_OUTPUT
          fi

  # 1.5 检查两个架构镜像是否都已存在
  check-images:
    needs: set-tag
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.check.outputs.skip_build }}
    steps:
      - name: Login DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if arch images exist
        id: check
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          AMD="${{ env.REPO_DOCKERHUB }}:$TAG-amd64"
          ARM="${{ env.REPO_DOCKERHUB }}:$TAG-arm64"

          AMD_OK=$(docker buildx imagetools inspect "$AMD" > /dev/null 2>&1 && echo yes || echo no)
          ARM_OK=$(docker buildx imagetools inspect "$ARM" > /dev/null 2>&1 && echo yes || echo no)

          echo "AMD_OK=$AMD_OK, ARM_OK=$ARM_OK"
          if [[ "$AMD_OK" == "yes" && "$ARM_OK" == "yes" ]]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug skip_build
        run: echo "skip_build=${{ steps.check.outputs.skip_build }}"

  # 2a. 并行：构建 amd64（若 skip_build=false）
  build-amd64:
    needs: [ set-tag, check-images ]
    if: needs.check-images.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          git lfs install --skip-smudge
          git clone https://x-access-token:${{ secrets.GITHUBTOKEN }}@github.com/QYG2297248353/AMMDS.git source
          cd source && git lfs pull --exclude="*"
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}
      - name: Build & push amd64
        uses: docker/build-push-action@v4
        with:
          context: ./source
          file: ./source/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REPO_DOCKERHUB }}:${{ needs.set-tag.outputs.tag }}-amd64
            ${{ env.REPO_GHCR }}:${{ needs.set-tag.outputs.tag }}-amd64

  # 2b. 并行：构建 arm64（若 skip_build=false）
  build-arm64:
    needs: [ set-tag, check-images ]
    if: needs.check-images.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          git lfs install --skip-smudge
          git clone https://x-access-token:${{ secrets.GITHUBTOKEN }}@github.com/QYG2297248353/AMMDS.git source
          cd source && git lfs pull --exclude="*"
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}
      - name: Build & push arm64
        uses: docker/build-push-action@v4
        with:
          context: ./source
          file: ./source/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.REPO_DOCKERHUB }}:${{ needs.set-tag.outputs.tag }}-arm64
            ${{ env.REPO_GHCR }}:${{ needs.set-tag.outputs.tag }}-arm64

  # 3a. 如果跳过构建（skip_build=true），立刻合并 manifest
  manifest-skip:
    needs: [ set-tag, check-images ]
    if: needs.check-images.outputs.skip_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}
      - uses: docker/setup-buildx-action@v2

      - name: Create & push DockerHub manifest
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          # 去掉 --push
          docker buildx imagetools create --tag ${{ env.REPO_DOCKERHUB }}:$TAG \
            ${{ env.REPO_DOCKERHUB }}:$TAG-amd64 \
            ${{ env.REPO_DOCKERHUB }}:$TAG-arm64
          docker buildx imagetools create --tag ${{ env.REPO_DOCKERHUB }}:latest \
            ${{ env.REPO_DOCKERHUB }}:$TAG-amd64 \
            ${{ env.REPO_DOCKERHUB }}:$TAG-arm64

      - name: Create & push GHCR manifest
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          docker buildx imagetools create --tag ${{ env.REPO_GHCR }}:$TAG \
            ${{ env.REPO_GHCR }}:$TAG-amd64 \
            ${{ env.REPO_GHCR }}:$TAG-arm64
          docker buildx imagetools create --tag ${{ env.REPO_GHCR }}:latest \
            ${{ env.REPO_GHCR }}:$TAG-amd64 \
            ${{ env.REPO_GHCR }}:$TAG-arm64

  # 3b. 如果没跳过（skip_build=false），等两架构构建完成后再合并
  manifest-after-build:
    needs: [ set-tag, check-images, build-amd64, build-arm64 ]
    if: needs.check-images.outputs.skip_build == 'false'
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUBTOKEN }}
      - uses: docker/setup-buildx-action@v2

      - name: Create & push DockerHub manifest
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          docker buildx imagetools create --tag ${{ env.REPO_DOCKERHUB }}:$TAG \
            ${{ env.REPO_DOCKERHUB }}:$TAG-amd64 \
            ${{ env.REPO_DOCKERHUB }}:$TAG-arm64
          docker buildx imagetools create --tag ${{ env.REPO_DOCKERHUB }}:latest \
            ${{ env.REPO_DOCKERHUB }}:$TAG-amd64 \
            ${{ env.REPO_DOCKERHUB }}:$TAG-arm64

      - name: Create & push GHCR manifest
        run: |
          TAG=${{ needs.set-tag.outputs.tag }}
          docker buildx imagetools create --tag ${{ env.REPO_GHCR }}:$TAG \
            ${{ env.REPO_GHCR }}:$TAG-amd64 \
            ${{ env.REPO_GHCR }}:$TAG-arm64
          docker buildx imagetools create --tag ${{ env.REPO_GHCR }}:latest \
            ${{ env.REPO_GHCR }}:$TAG-amd64 \
            ${{ env.REPO_GHCR }}:$TAG-arm64
